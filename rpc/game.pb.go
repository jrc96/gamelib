// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	game.proto

It has these top-level messages:
	GameMsg
	Session
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GameMsg struct {
	ServiceName string   `protobuf:"bytes,1,opt,name=ServiceName" json:"ServiceName,omitempty"`
	Msg         []byte   `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Session     *Session `protobuf:"bytes,3,opt,name=Session" json:"Session,omitempty"`
}

func (m *GameMsg) Reset()                    { *m = GameMsg{} }
func (m *GameMsg) String() string            { return proto.CompactTextString(m) }
func (*GameMsg) ProtoMessage()               {}
func (*GameMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GameMsg) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *GameMsg) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *GameMsg) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type Session struct {
	Uid uint64 `protobuf:"varint,1,opt,name=Uid" json:"Uid,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Session) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*GameMsg)(nil), "rpc.GameMsg")
	proto.RegisterType((*Session)(nil), "rpc.Session")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Game service

type GameClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Game_StreamClient, error)
	Call(ctx context.Context, in *GameMsg, opts ...grpc.CallOption) (*GameMsg, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Game_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Game_serviceDesc.Streams[0], c.cc, "/rpc.Game/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameStreamClient{stream}
	return x, nil
}

type Game_StreamClient interface {
	Send(*GameMsg) error
	Recv() (*GameMsg, error)
	grpc.ClientStream
}

type gameStreamClient struct {
	grpc.ClientStream
}

func (x *gameStreamClient) Send(m *GameMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameStreamClient) Recv() (*GameMsg, error) {
	m := new(GameMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Call(ctx context.Context, in *GameMsg, opts ...grpc.CallOption) (*GameMsg, error) {
	out := new(GameMsg)
	err := grpc.Invoke(ctx, "/rpc.Game/Call", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Game service

type GameServer interface {
	Stream(Game_StreamServer) error
	Call(context.Context, *GameMsg) (*GameMsg, error)
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).Stream(&gameStreamServer{stream})
}

type Game_StreamServer interface {
	Send(*GameMsg) error
	Recv() (*GameMsg, error)
	grpc.ServerStream
}

type gameStreamServer struct {
	grpc.ServerStream
}

func (x *gameStreamServer) Send(m *GameMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameStreamServer) Recv() (*GameMsg, error) {
	m := new(GameMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Game_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Game/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Call(ctx, req.(*GameMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Game_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Game_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4f, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x4a, 0xe5, 0x62, 0x77,
	0x4f, 0xcc, 0x4d, 0xf5, 0x2d, 0x4e, 0x17, 0x52, 0xe0, 0xe2, 0x0e, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xf5, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x16, 0x12, 0x12,
	0xe0, 0x62, 0xf6, 0x2d, 0x4e, 0x97, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0x31, 0x85, 0xd4,
	0xb8, 0xd8, 0x83, 0x53, 0x8b, 0x8b, 0x33, 0xf3, 0xf3, 0x24, 0x98, 0x15, 0x18, 0x35, 0xb8, 0x8d,
	0x78, 0xf4, 0x8a, 0x0a, 0x92, 0xf5, 0xa0, 0x62, 0x41, 0x30, 0x49, 0x25, 0x69, 0xb8, 0x3a, 0x90,
	0x21, 0xa1, 0x99, 0x29, 0x60, 0xe3, 0x59, 0x82, 0x40, 0x4c, 0xa3, 0x08, 0x2e, 0x16, 0x90, 0x1b,
	0x84, 0xb4, 0xb8, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x85, 0x20, 0xa6, 0x40, 0x1d, 0x26,
	0x85, 0xc2, 0x53, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x14, 0x52, 0xe1, 0x62, 0x71, 0x4e, 0xcc, 0xc9,
	0xc1, 0xaf, 0x32, 0x89, 0x0d, 0xec, 0x53, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xdd, 0xcc,
	0x0d, 0x4d, 0xf7, 0x00, 0x00, 0x00,
}
